<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[node特点以及模块还有npm与yarn]]></title>
      <url>/2017/07/02/node%E7%89%B9%E7%82%B9%E4%BB%A5%E5%8F%8A%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8%E8%BF%98%E6%9C%89npm%E4%B8%8Eyarn/</url>
      <content type="html"><![CDATA[<h2 id="如何解决函数中的异步问题"><a href="#如何解决函数中的异步问题" class="headerlink" title="如何解决函数中的异步问题"></a>如何解决函数中的异步问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let read=(cb)=&gt;&#123;</div><div class="line">    setTimeout(()=&gt;&#123;</div><div class="line">         str=&apos;wohenshuai&apos;;</div><div class="line">         cb(str)</div><div class="line">    &#125;,2000)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//获取到wohenshuai</div><div class="line">read(function (data) &#123;</div><div class="line">    console.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="node-怎么解决异步问题？"><a href="#node-怎么解决异步问题？" class="headerlink" title="node 怎么解决异步问题？"></a>node 怎么解决异步问题？</h2><ul>
<li>callback<h2 id="node不具有兼容性问题"><a href="#node不具有兼容性问题" class="headerlink" title="node不具有兼容性问题"></a>node不具有兼容性问题</h2></li>
</ul>
<h2 id="在node中-能用异步绝不用同步"><a href="#在node中-能用异步绝不用同步" class="headerlink" title="在node中 能用异步绝不用同步"></a>在node中 能用异步绝不用同步</h2><ul>
<li>要解决异步问题 就是回调函数，将后续的逻辑当作参数传递给这个函数</li>
<li>异步永远在同步之后执行，如果同步代码执行不能完成，异步永远不会触发</li>
<li>浏览器刷新频率18~20毫秒，防止dom渲染设置settimeout20毫秒</li>
<li>非阻塞(厨师)是异步的前置条件</li>
</ul>
<h2 id="什么是io？"><a href="#什么是io？" class="headerlink" title="什么是io？"></a>什么是io？</h2><ul>
<li>input(输入)从文件系统中读取文件</li>
<li>Output(输出)想文件系统中写入文件</li>
</ul>
<h2 id="单线程-多线程-gt-node是基于js的"><a href="#单线程-多线程-gt-node是基于js的" class="headerlink" title="单线程 多线程-&gt;node是基于js的"></a>单线程 多线程-&gt;node是基于js的</h2><ul>
<li>java 多线程 同步</li>
<li>node 单线程 异步  </li>
<li>js中的多线程h5 链接：<a href="http://blog.sina.com.cn/s/blog_63940ce201018lyh.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_63940ce201018lyh.html</a></li>
<li><p>如果想开多线程 要开子线程</p>
</li>
<li><p>什么是多线程（感觉像同一时间干了很多事，快速切换上下文） 单线程</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> function a(b) &#123;</div><div class="line">     return b;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line">1 箭头函数不需要funtion 声明</div><div class="line">2 如果箭头后面是一个&#123;&#125; 需要些return</div><div class="line">3 this 指向 箭头函数中没有this指向，所以this指向上一级，从而解决了this问题.</div><div class="line"></div><div class="line"></div><div class="line"> let a=(b,c)=&gt;b+c;</div><div class="line"></div><div class="line"> function a(b) &#123;</div><div class="line">     return function c(d) &#123;</div><div class="line">         return b+d;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  a=b=&gt;&#123;return d=&gt;&#123;return b+d&#125;&#125;</div><div class="line"></div><div class="line"> let a=b=&gt;d=&gt;b+d;</div><div class="line"></div><div class="line">console.log(a(1)(2));</div><div class="line"></div><div class="line">//可以通过箭头函数 解决this问题，或者用bind解决this指向问题,不用es6箭头函数，输出this是window</div><div class="line"></div><div class="line">let obj=&#123;</div><div class="line">    a:function () &#123;</div><div class="line">        setTimeout(()=&gt;&#123;</div><div class="line">            console.log(this);//obj</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.a();</div></pre></td></tr></table></figure>
<h2 id="全局变量golbal"><a href="#全局变量golbal" class="headerlink" title="全局变量golbal"></a>全局变量golbal</h2><ul>
<li><p>只要在文件中，可以不用声明直接使用的叫做全局对象，<br>服务端没有window 点击事件，没有那些ajax。</p>
</li>
<li><p>服务端有global，global上的对象都可以直接访问-&gt;全局对象</p>
</li>
<li><p>process 进程</p>
</li>
<li>Buffer 缓存区 （表示内存）</li>
<li>clearImmediate setImmediate</li>
<li>clearInterval  setInterval</li>
<li>clearTimeout   setTimeout</li>
<li>console -&gt; log dir info error warn time/timeEnd (不常用)</li>
</ul>
<p>console.log(‘a’);<br>setTimeout(function () {<br>    console.timeEnd(‘a’);<br>},2000);</p>
<h2 id="node环境下执行项目"><a href="#node环境下执行项目" class="headerlink" title="node环境下执行项目"></a>node环境下执行项目</h2><ul>
<li>因为配置过node 可以右键run ，可以在命令行下执行某个文件</li>
<li>在命令行下 通过node+ 文件名执行</li>
</ul>
<h2 id="2-setTimeout-callback-异步-事件环，node程序是事件环"><a href="#2-setTimeout-callback-异步-事件环，node程序是事件环" class="headerlink" title="2.setTimeout callback 异步 (事件环，node程序是事件环)"></a>2.setTimeout callback 异步 (事件环，node程序是事件环)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeout(function (data,a) &#123;</div><div class="line">    console.log(data,a);</div><div class="line">    console.log(this);</div><div class="line">&#125;,1000,&apos;你好&apos;,&apos;不好&apos;);</div></pre></td></tr></table></figure>
<ul>
<li>你好,setTimeout可以传递参数，这里的this指向setTimeout自己,文件中直接打印this 是空对象</li>
</ul>
<h2 id="setImmediate-立即-异步的-第二个小本上的"><a href="#setImmediate-立即-异步的-第二个小本上的" class="headerlink" title="setImmediate 立即 异步的 第二个小本上的"></a>setImmediate 立即 异步的 第二个小本上的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setImmediate(function () &#123;</div><div class="line">    console.log(&apos;立即&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>一般情况和不写时间的settimeout是一样的</li>
</ul>
<h2 id="process进程-设置环境变量，-生成环境-开发环境"><a href="#process进程-设置环境变量，-生成环境-开发环境" class="headerlink" title="process进程 设置环境变量， 生成环境 开发环境"></a>process进程 设置环境变量， 生成环境 开发环境</h2><ul>
<li>在开发的时候输出开发环境 ，上线的时候输出生成环境<br>console.log(process.env);//environment ，两个系统 mac windows</li>
<li><p>设置环境变量通过 set a=b 设置 可以通过process.env取出来(只在命令行下使用)，可以区分开发环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(process.env.NODE_ENV===&apos;dev&apos;)&#123;</div><div class="line">    console.log(&apos;开发环境&apos;)</div><div class="line">&#125;else &#123;</div><div class="line">    console.log(&apos;生成环境&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>服务端全局变量 global  挂载在global上的属性 可以直接获取,var 声明的不会挂载在global上，为了解决模块化问题<br>global.a=1;<br>console.log(a);</p>
</li>
</ul>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(con);//输出这个未定义的con，可以报错，然后就可以看到闭包中的五个形参</div><div class="line">//require exports module 都是这个文件外层套了一个闭包，闭包中的形参</div><div class="line">//require,exports,module,__dirname,__filename 也叫全局对象</div><div class="line"></div><div class="line">//console.log(arguments);</div></pre></td></tr></table></figure>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul>
<li>js中实现模块化，单例，闭包</li>
<li>单例 缺点：不能保证一定不冲突，会导致调用过长，require(AMD) ,seajs(CMD),import export,不兼容</li>
<li>没有块级作用域</li>
</ul>
<h2 id="node-自带模块化-commonjs规范"><a href="#node-自带模块化-commonjs规范" class="headerlink" title="node 自带模块化 commonjs规范"></a>node 自带模块化 commonjs规范</h2><ul>
<li>怎么定义一个模块(每一个js都是一个模块，在每个文件外面增加一个闭包)</li>
<li>如何导出一个模块 module.exports/exports</li>
<li>如何引用一个模块 require();</li>
</ul>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function sum(...arr) &#123;</div><div class="line">    //Array.from(arguments) 将arguments转化为数组 es6方法</div><div class="line">    //[].slice.call(arguments) 将arguments转化为数组 原生方法</div><div class="line">    let total=0</div><div class="line">    arr.forEach(item=&gt;total+=item);</div><div class="line">    return total;</div><div class="line">&#125;</div><div class="line">//导出的函数不要用箭头函数</div><div class="line">//1.module.exports=sum;</div><div class="line">//2.exports.sum=sum;</div><div class="line">//3.module.exports.sum=sum;</div><div class="line"></div><div class="line">let sum=require(&quot;./sum&quot;);</div><div class="line">//sum拿到的是module.exports对象</div><div class="line">//1.sum(1,2,3,4,5,6)</div><div class="line">//2\3.sum(1,2,3,4,5)</div><div class="line">global.sum=sum;</div><div class="line">//尽量不要在global上挂载属性</div></pre></td></tr></table></figure>
<h2 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h2><ul>
<li>文件模块</li>
<li><p>第三方模块 别人写的，需要下载 npm下载模块</p>
<ul>
<li><p>全局安装(只能在命令行下使用 会提供给你一个全局命令,代码里不能使用)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install nrm -g</div><div class="line">nrm test</div><div class="line">nrm use taobao/cnpm</div></pre></td></tr></table></figure>
</li>
<li><p>本地安装(在当前项目下使用)<br>  自己不能安装自己<br>  npm init 记录所有依赖的 package.json，可能会导致安装到上级目录，名字不能有中文 不能有大写 不能有特殊字符 快捷一件npm init -y</p>
<ul>
<li>安装 npm install</li>
<li>开发依赖 只在开发时应用 例如less   –save-dev(-D)</li>
<li>项目依赖 开发上线都需要 例如jquery  –save(-S)</li>
<li>卸载 npm uninstall 模块的名字 –save</li>
<li>查看模块版本 npm info vue</li>
<li>指定版本安装 npm install vue@1.0.0 –save  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>内置模块、核心模块 node自带的</p>
</li>
</ul>
<h2 id="yarn-需要npm来下载-主流"><a href="#yarn-需要npm来下载-主流" class="headerlink" title="yarn 需要npm来下载(主流)"></a>yarn 需要npm来下载(主流)</h2><ul>
<li><p>安装一次即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install yarn -g</div></pre></td></tr></table></figure>
</li>
<li><p>初始化 package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn init -y</div></pre></td></tr></table></figure>
</li>
<li><p>本地安装<br>  -开发依赖 yarn add less -dev<br>  -项目依赖 yarn add jquery</p>
</li>
<li>删除<ul>
<li>yarn remove less -dev</li>
</ul>
</li>
</ul>
<blockquote>
<p>npm node package manager 管理node的包 (很多js文件)的，安装node自带npm ，买node送npm</p>
</blockquote>
<h2 id="发布包-必须得是别人没发过的，包里需要有一个package-json"><a href="#发布包-必须得是别人没发过的，包里需要有一个package-json" class="headerlink" title="发布包(必须得是别人没发过的，包里需要有一个package.json)"></a>发布包(必须得是别人没发过的，包里需要有一个package.json)</h2><ul>
<li><p>需要登录到官方npm上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nrm use npm</div></pre></td></tr></table></figure>
</li>
<li><p>注册账号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm addUser</div><div class="line">npm publish 发布</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/2017/07/01/git/</url>
      <content type="html"><![CDATA[<h1 id="201704—-homework"><a href="#201704—-homework" class="headerlink" title="201704—_homework"></a>201704—_homework</h1><h2 id="git下载地址"><a href="#git下载地址" class="headerlink" title="git下载地址"></a>git下载地址</h2><p><a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></p>
<p>windows下使用linux命令</p>
<h2 id="mac下"><a href="#mac下" class="headerlink" title="mac下"></a>mac下</h2><ul>
<li>增强mac下的命令窗口 oh-my-zsh item2</li>
</ul>
<h2 id="cd-changeDirectory"><a href="#cd-changeDirectory" class="headerlink" title="cd changeDirectory"></a>cd changeDirectory</h2><h2 id="告诉git你是谁"><a href="#告诉git你是谁" class="headerlink" title="告诉git你是谁"></a>告诉git你是谁</h2><p>git config –list 查看git配置列表（查看当前有没有配置过）<br>git config –global user.name github账号名<br>git config –global user.email github邮箱</p>
<h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf .git  (慎重使用)</div></pre></td></tr></table></figure>
<h2 id="要管理文件"><a href="#要管理文件" class="headerlink" title="要管理文件"></a>要管理文件</h2><ul>
<li>初始化git，告诉git哪个文件夹归你管理<br>git init</li>
</ul>
<p>-&gt; git仓库 不能嵌套</p>
<p>ls(查看.git) ls -a 查看隐藏的</p>
<h2 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h2><p>可以创建以 .开头的文件</p>
<h2 id="cat-查看文件"><a href="#cat-查看文件" class="headerlink" title="cat 查看文件"></a>cat 查看文件</h2><h2 id="vi-文件名-打开文件"><a href="#vi-文件名-打开文件" class="headerlink" title="vi +文件名 打开文件"></a>vi +文件名 打开文件</h2><ul>
<li>i 插入   a 插入</li>
<li>ESC+:wq! 保存退出</li>
</ul>
<h2 id="增加暂存区"><a href="#增加暂存区" class="headerlink" title="增加暂存区"></a>增加暂存区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
<blockquote>
<p>在工作区中的文件是红色的，添加到暂存区是绿色的</p>
</blockquote>
<h2 id="添加到历史区"><a href="#添加到历史区" class="headerlink" title="添加到历史区"></a>添加到历史区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m&apos;xxx&apos;</div></pre></td></tr></table></figure>
<p>##查看状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<h2 id="查看历史状态（查看提交日志）"><a href="#查看历史状态（查看提交日志）" class="headerlink" title="查看历史状态（查看提交日志）"></a>查看历史状态（查看提交日志）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
<h2 id="工作区和暂存区比较"><a href="#工作区和暂存区比较" class="headerlink" title="工作区和暂存区比较"></a>工作区和暂存区比较</h2><p>git diff</p>
<h2 id="暂存区和历史区"><a href="#暂存区和历史区" class="headerlink" title="暂存区和历史区"></a>暂存区和历史区</h2><p>git diff –cached</p>
<h2 id="工作区和版本库"><a href="#工作区和版本库" class="headerlink" title="工作区和版本库"></a>工作区和版本库</h2><p>git diff master</p>
<h2 id="移除本次的add"><a href="#移除本次的add" class="headerlink" title="移除本次的add"></a>移除本次的add</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD 文件名</div></pre></td></tr></table></figure>
<h2 id="从暂存区覆盖掉工作区"><a href="#从暂存区覆盖掉工作区" class="headerlink" title="从暂存区覆盖掉工作区"></a>从暂存区覆盖掉工作区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout 文件名</div></pre></td></tr></table></figure>
<h2 id="回滚，将工作区-暂存区-历史区用同一版本全部覆盖掉"><a href="#回滚，将工作区-暂存区-历史区用同一版本全部覆盖掉" class="headerlink" title="回滚，将工作区 暂存区 历史区用同一版本全部覆盖掉"></a>回滚，将工作区 暂存区 历史区用同一版本全部覆盖掉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard 版本号</div></pre></td></tr></table></figure>
<blockquote>
<p>想查看未来需要用<br>git reflog  然后再用git reset –hard 版本号跳转版本</p>
</blockquote>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">查看分支</div><div class="line">git branch</div></pre></td></tr></table></figure>
<p>创建分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch dev  (dev就是分支名字)</div></pre></td></tr></table></figure></p>
<p>切换分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout dev</div></pre></td></tr></table></figure></p>
<p>删除分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D dev</div></pre></td></tr></table></figure></p>
<blockquote>
<p>创建并切换分支 git checkout -b dev</p>
<p>只有将内容提交到某个分支上，这个内容才能归属于那个分支，别的分支就看不到这个内容了</p>
</blockquote>
<p>合并分支<br>在master上合并dev<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">合并分支 git merge dev</div></pre></td></tr></table></figure></p>
<h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><ul>
<li>git init</li>
<li>touch .gitignore 写上忽略内容</li>
<li>创建需要提交的文件(空文件夹不会被提交)</li>
<li>添加到暂存区</li>
<li>添加到历史区</li>
</ul>
<blockquote>
<p>保证github是可用状态</p>
</blockquote>
<h2 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote add 别名(origin) 地址</div><div class="line">git remote -v 查看关联的仓库</div><div class="line">git remote rm 别名               可以删除链接</div></pre></td></tr></table></figure>
<h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h2 id="发布github静态页"><a href="#发布github静态页" class="headerlink" title="发布github静态页"></a>发布github静态页</h2><ul>
<li>必须要有一个固定的分支 (gh-pages)</li>
<li>需要将内容发送到这个分支上</li>
<li>在setting中可以免费送你一个网址<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout -b gh-pages</div><div class="line">touch index.html</div><div class="line">git add .</div><div class="line">git commit -m&apos;addHtml&apos;</div><div class="line">git push origin gh-pages</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone 别人的地址 别名</div><div class="line">git pull origin master 即可 (冲突文件提交（历史区）后再次拉取)</div></pre></td></tr></table></figure>
<h2 id="pull-request"><a href="#pull-request" class="headerlink" title="pull request"></a>pull request</h2><ul>
<li>可以发送合并请求（必须是fork过来的 ，才可以发送合并请求）</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[call apply bind JSON]]></title>
      <url>/2017/05/02/call-apply-bind-JSON/</url>
      <content type="html"><![CDATA[<h3 id="原型深入"><a href="#原型深入" class="headerlink" title="原型深入"></a>原型深入</h3><p>getElementsByName的上下文必须是document</p>
<p>creatElement 上下文也是document</p>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>所有的函数都有一个属性length，表示参数的数量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    function fn() &#123;</div><div class="line">        console.log(this)</div><div class="line">        console.log(n + m);</div><div class="line">    &#125;</div><div class="line">    console.log(fn.length);</div><div class="line">    //fn.__proto__</div><div class="line">    console.dir(Function.prototype);</div><div class="line">    console.log(Function.prototype.call.length);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>函数原型上的call方法是一个函数,这个方法至少要传一个参数，这个参数是用来改变前面的方法this的</p>
<p>call方法两个作用：</p>
<p>1.改变this</p>
<p>2.让当前函数（this）执行。</p>
<p>实例.call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fn.call//call中的this是fn</div><div class="line"></div><div class="line">fn.call(obj)//1.将fn中的this替换成obj</div></pre></td></tr></table></figure></p>
<p>2.让fn执行</p>
<p>在非严格模式下，不传参数或者是传了个null，undefined，默认是window。在严格模式下undefined”use strict”，不传或者是传了个null，undefined，是将this变成了undefined.  (严格模式一般用在封装组件或函数方法的时候)</p>
<p>call方法从第二个参数开始就是给前面的函数传的参数</p>
<p>当使用函数.call.call()，两个及两个以上的call你传的参数不是一个函数就会报错。因为只有函数的原型上才会有call这个方法</p>
<p>换句话说，你用两个及两个以上的call方法执行的时候，相当于你把传进来的那个函数执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">fn.call(obj,1,2);</div><div class="line">   Function.prototype.call=function (obj) &#123;</div><div class="line">        this  //实例</div><div class="line">    &#125;</div><div class="line">    fn.call()//</div><div class="line">    //fn.call.call(obj)-&gt;obj.call()</div><div class="line"></div><div class="line"></div><div class="line">    function ff() &#123;</div><div class="line">        console.log(&quot;hh&quot;)</div><div class="line">    &#125;</div><div class="line">    [].constructor.call.call(ff)</div></pre></td></tr></table></figure>
<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>“use strict”//严格模式</p>
<p>在严格模式下，函数执行的时候，前面没有点，this-&gt;undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function fn() &#123;</div><div class="line">        console.log(this);</div><div class="line">   &#125;</div><div class="line">    fn()</div><div class="line">    Window.fn();</div></pre></td></tr></table></figure></p>
<p>2.<br>call()不传参数 ，</p>
<p>或传了个unll -&gt; this=null，undefined-&gt; this=undefined</p>
<p>fn.call();//undefined</p>
<p>fn.call(null);//null</p>
<p>fn.call(undefined);//undefined</p>
<h4 id="call方法的深入"><a href="#call方法的深入" class="headerlink" title="call方法的深入"></a>call方法的深入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Function.prototype.call=function () &#123;</div><div class="line">    this()</div><div class="line">&#125;;</div><div class="line">function f() &#123;</div><div class="line">    console.log(this,&quot;f&quot;);</div><div class="line">&#125;</div><div class="line">function ff() &#123;</div><div class="line">    console.log(this,&quot;ff&quot;)</div><div class="line">&#125;</div><div class="line">f();</div><div class="line">f.call();</div><div class="line">f.call.call(ff);//1.改变的是f.call中的this，2.然后f.call()也就是执行this()-&gt;ff()</div><div class="line">f.call.call.call(ff);//1.改变的是f.call.call中的this，2f.call.call 执行就是this()-&gt;ff()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function f1(n) &#123;</div><div class="line">    console.log(this,n)</div><div class="line">&#125;</div><div class="line">function f2(m,w) &#123;</div><div class="line">    console.log(this,m,w)</div><div class="line">&#125;</div><div class="line">f1.call();</div><div class="line">f1.call.call(f2,1);</div><div class="line">参数f2是用来改变f1.call中的this，参数1是给f1.call传参数数的</div><div class="line">1.f1.call中的this变成f2</div><div class="line">2.f1.call(1) call方法中是让this(),我们现在把this变成f2,也就是让f2(),</div><div class="line">3.将f2中的this变成了1，1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">f1.call.call.call(f2,1,2,3);</div><div class="line">  f1.call.call(1,2,3)  中this变成f2</div><div class="line">  f2.call(1,2,3)</div><div class="line"></div><div class="line">  两个及两个以上的call(fn,obj,n,m,...)</div><div class="line">  fn:必须是函数</div><div class="line">  obj是用来改变fn的this</div><div class="line">  n,m..:给fn 传的参数</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function dd(n,m) &#123;</div><div class="line">        console.log(this,n,m)</div><div class="line">    &#125;</div><div class="line">    function bb(x,y) &#123;</div><div class="line">        console.log(this,x,y)</div><div class="line">    &#125;</div><div class="line">    var obj=&#123;n:1,m:2&#125;;</div><div class="line">    dd.call(null,1,2);</div><div class="line">    dd.call.call(dd,1,1);</div><div class="line">    dd.call.call(bb,obj,1,2,3,4,4,1);</div><div class="line">    dd.call.call.call.call(bb,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;);</div><div class="line">    bb.call(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;);</div></pre></td></tr></table></figure>
<p>call:记住三句话：</p>
<p> 1.改变前面方法的this，不管前面有多少东西</p>
<p> 2.让前面方法执行，不管前面有多长</p>
<p> 3.call方法最终执行的一句核心是this()</p>
<p>外加的：两个及两个以上的call。最后一个call的第一个参数是来改变前面call方法中的this，那么this()就变成了第一个参数执行，所以第一个参数必须是函数，否则会报错</p>
<h4 id="call将类数组转为数组"><a href="#call将类数组转为数组" class="headerlink" title="call将类数组转为数组"></a>call将类数组转为数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">        console.log(a);</div><div class="line">        a=1;</div><div class="line">        //先执行try里面的代码，如果报错了就执行catch里面的代码</div><div class="line">    &#125;catch(e)&#123;</div><div class="line">        //e是一个对象，里面存着错误信息，存在e.message，这里面存着try里面的错误信息</div><div class="line">        console.log(e.message);</div><div class="line">        //throw new Error(&quot;我错了&quot;);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>call在IE低版本不支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function toArray(likeArray) &#123;</div><div class="line">    var ary=[];</div><div class="line">    try &#123;</div><div class="line">        return Array.prototype.slice.call(likeArray,0);</div><div class="line">    &#125;</div><div class="line">    catch (e)&#123;</div><div class="line">        for (var i=0;i&lt;likeArray.length;i++)&#123;</div><div class="line">            ary.push(likeArray[i])</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return ary</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">function fn() &#123;</div><div class="line">    return toArray(arguments)</div><div class="line">&#125;</div><div class="line">console.log(fn(1, 3, 4, 5, 6, 7, 8, 9));</div></pre></td></tr></table></figure></p>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>Function.prototype.appl</p>
<p>apply 跟call意思和用法一样，区别是：apply第一个参数也是改变this用的，第二个参数是一个数组，这个数组是给前面的方法传参数的，将数组里面的每一项一个一个传给函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function fn(x,y)</div><div class="line">    this.x=x+y;</div><div class="line">        this.y=x-y;</div><div class="line">        console.log(this.x,this.y,x,y)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fn(1,2);</div><div class="line">    fn.call(null,1,2);</div><div class="line">    fn.apply(undefined,[1,2])</div></pre></td></tr></table></figure></p>
<h4 id="apply求数组最大值"><a href="#apply求数组最大值" class="headerlink" title="apply求数组最大值"></a>apply求数组最大值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var ary=[2,4,6,18,9,34,10];</div><div class="line">    //1.排序</div><div class="line">    function MAX1(ary) &#123;</div><div class="line">        return ary.sort(function (a,b) &#123;</div><div class="line">            return b-a</div><div class="line">        &#125;)[0]</div><div class="line">    &#125;</div><div class="line">    console.log(MAX1(ary));</div><div class="line">    //2.eval</div><div class="line">    function MAX2(ary) &#123;</div><div class="line">        //return eval(&quot;Math.max(&quot;++&quot;)&quot;)</div><div class="line">        return eval(&quot;Math.max(&quot;+ary+&quot;)&quot;)</div><div class="line">    &#125;</div><div class="line">    console.log(MAX2(ary));</div><div class="line">    //3.apply</div><div class="line">    //Math.max.apply(null,ary)</div><div class="line">    function MAX3(ary) &#123;</div><div class="line">        return Math.max.apply(null,ary)</div><div class="line">    &#125;</div><div class="line">    console.log(MAX3(ary));</div><div class="line">    //4.假设法</div><div class="line">    function MAX4(ary) &#123;</div><div class="line">        var max=ary[0];</div><div class="line">        ary.forEach(function (item,index) &#123;</div><div class="line">            max=item&gt;=max?item:max;</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        return max</div><div class="line">    &#125;</div><div class="line">    console.log(MAX4(ary));</div></pre></td></tr></table></figure>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind 在IE低版本不兼容，只改变函数this返回一个新的函数，原来的函数不变，不会让函数执行。  以后在事件中常用，我们会自己写一个兼容任何浏览器的方法。   (返回的新的函数和原函数长的一样，只是this是obj，fn是不变的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    var a=2;</div><div class="line">    function fn() &#123;</div><div class="line">        console.log(this.a);</div><div class="line">    &#125;</div><div class="line">    var obj=&#123;a:1&#125;;</div><div class="line"></div><div class="line">    fn();//window</div><div class="line">    var fn1=fn.bind(obj);  //可以传参数，一般不传，fn.bind(obj,1) 输出到控制台是分两步显示</div><div class="line">    fn1();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h4><p>1.typeof 返回值是一个字符串，如果用两个及以上的typeof检测的话返回值”string”，但是他有局限性，能详细检测基本数据类型，但是null不行，检测出来的是object，对于引用数据类型不能详细检测只有object和function</p>
<p>2.instanceof 检测一个实例是否属于某个类，因为每一种数据类型都对应自己所属的类，所以我们可以通过他来检测数据类型，但是也有局限性，对于基本疏忽类型 用字面量创建方式穿件的变量检测不出来，构造函数创建方式可以，引用数据类型可以详细检测。</p>
<p>3.类原型上的constructor，每个类的原型(prototype)上都有一个constructor属性，他指向类本身，那么一个具体的数据类型的实例.constructor。比如”11”.constructor -&gt;”11”.<strong>proto</strong>-&gt;String.prototype，String原型上有constructor指向String本身，你也可以通过他的name来得到String类名，也就是它的数据类型</p>
<p>4.toString<br> 对象Object类的原型上有一个tostring，他可以检测数据类型，那么我们就调用Object.prototype.tostring()这个方法，将里面的this改变成我们想要检测的那个数据，会得到”[object 数据类型]”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    function fn1(n) &#123;</div><div class="line">        console.log(this);</div><div class="line">        console.log(n++,n);</div><div class="line">    &#125;</div><div class="line">    function fn2(n) &#123;</div><div class="line">        console.log(this);</div><div class="line">        console.log(n--,n);</div><div class="line">    &#125;</div><div class="line">    fn1();//NaN,NaN</div><div class="line">    fn1.call(null,12);//w  12   13</div><div class="line">    fn1.call.call(fn2);// w  n  n</div><div class="line">    fn1.call.call.call(fn2,10);//w   10   9</div><div class="line">    [].push.call.call(fn1,4);//</div><div class="line">    Array.call.call(fn2,6);//</div><div class="line">    [].constructor.call.call.call(fn1,8)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.dir(<span class="built_in">JSON</span>);</div><div class="line"><span class="comment">//1.JSON 是个对象，是window下的一个属性，也可以理解为是个全局变量，在IE低版本下没有</span></div><div class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">a</span>:<span class="string">"a"</span>,<span class="number">1</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="comment">//JSON 对象与普通对象区别</span></div><div class="line"><span class="comment">//1.JSON的属性名用双引号包起来</span></div><div class="line"><span class="comment">//2.属性值如果是字符串的话，也得用双引号包起来</span></div><div class="line"><span class="keyword">var</span> jsonObj=&#123;<span class="string">"a"</span>:<span class="string">"a"</span>,<span class="string">"1"</span>:<span class="number">1</span>,<span class="string">"age"</span>:<span class="number">12</span>,<span class="string">"ary"</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;;</div><div class="line"><span class="comment">//json 字符串，一般从后台获取回来的数据都是json字符串</span></div><div class="line"><span class="keyword">var</span> jsonStr=<span class="string">'&#123;"a":"a","1":1,"age":12,"ary":[1,2]&#125;'</span>;</div><div class="line"><span class="comment">//JSON.parse()将json格式的字符串转为json格式的对象</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(jsonStr).ary);</div><div class="line"><span class="comment">//JSON.stringify()将json格式的对象转为json格式的字符串</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(jsonObj));</div><div class="line"><span class="comment">//在IE下没有JSON就用eval来实现</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonParse</span>(<span class="params">jsonStr</span>) </span>&#123;</div><div class="line">    <span class="comment">//如果浏览器种有JSON就用它</span></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(jsonStr)</div><div class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"("</span>+jsonStr+<span class="string">")"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//否则用eval</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonParse</span>(<span class="params">jsonStr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span><span class="string">"JSON"</span><span class="keyword">in</span> <span class="built_in">window</span>?<span class="built_in">JSON</span>.parse(jsonStr):<span class="built_in">eval</span>(<span class="string">"("</span>+jsonStr+<span class="string">")"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DOM映射"><a href="#DOM映射" class="headerlink" title="DOM映射"></a>DOM映射</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</div><div class="line">          <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">          <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">          <span class="attribute">-webkit-user-select</span>: none;</div><div class="line">          <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">          <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</div><div class="line">          <span class="attribute">list-style</span>: none;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-id">#news</span>&#123;</div><div class="line">          <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">          <span class="attribute">margin</span>: <span class="number">20px</span> auto;</div><div class="line">          <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">2px</span>;</div><div class="line">          <span class="attribute">border</span>: <span class="number">2px</span> dashed darkgrey;</div><div class="line">          <span class="attribute">background-color</span>: azure;</div><div class="line">          <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-id">#news</span> <span class="selector-tag">li</span>&#123;</div><div class="line">          <span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">          <span class="attribute">color</span>: blue;</div><div class="line">          <span class="attribute">padding-left</span>: <span class="number">10px</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span><span class="selector-class">.li0</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>: bisque;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span><span class="selector-class">.li1</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>: navajowhite;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span><span class="selector-class">.li2</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>: silver;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span><span class="selector-class">.li3</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>: gainsboro;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span><span class="selector-class">.li4</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>: peachpuff;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span><span class="selector-class">.li5</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>: seashell;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;ul id="news"&gt;</div><div class="line">&lt;li class="li0"&gt;珠峰开课了~&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script TYPE="text/javascript"&gt;</div><div class="line">    var jsonData=[&#123;</div><div class="line">        "content":"赵四出轨~",</div><div class="line">        "class":"li1"</div><div class="line">    &#125;,&#123;</div><div class="line">        "content":"白百何离婚了~",</div><div class="line">        "class":"li2"</div><div class="line">    &#125;,&#123;</div><div class="line">        "content":"郭富城结婚了~",</div><div class="line">        "class":"li3"</div><div class="line">    &#125;,&#123;</div><div class="line">        "content":"五一假期过完了~",</div><div class="line">        "class":"li4"</div><div class="line">    &#125;,&#123;</div><div class="line">        "content":"端午节不放假啊~",</div><div class="line">        "class":"li5"</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    var news=document.getElementById("news");</div><div class="line">    var oLis=news.getElementsByTagName("li");</div><div class="line">    console.log(oLis);</div><div class="line">    oLis[0].onmouseover=function () &#123;</div><div class="line">        this.style.backgroundColor="plum";</div><div class="line">    &#125;;</div><div class="line">    oLis[0].onmouseout=function () &#123;</div><div class="line">        this.style.backgroundColor="bisque";</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">        for (var i=0;i&lt;jsonData.length;i++)&#123;</div><div class="line">        var oLi=document.createElement("li");</div><div class="line">        oLi.innerHTML=jsonData[i]["content"];</div><div class="line">        oLi.className=jsonData[i]["class"];</div><div class="line">        news.appendChild(oLi);</div><div class="line">    &#125;</div><div class="line">    console.log(oLis);</div><div class="line">    var aryLis=[];</div><div class="line">    for (var i=0;i&lt; oLis.length;i++)&#123;</div><div class="line">       aryLis.push(oLis[i])</div><div class="line">    &#125;</div><div class="line">    console.log(aryLis);</div><div class="line">    aryLis[3].id="li3";</div><div class="line"></div><div class="line">    DOM映射：</div><div class="line">通过DOM方法获取的一个元素集合（类数组），这个集合仍然和页面的元素保持着联系，并且这个元素集合会随着页面元素的增加而增加，减少而减少，即使把这个类数组转为一个数组，每个元素仍然和页面有联系，这就叫做DOM映射</div><div class="line">--&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;!--</div><div class="line">回流：</div><div class="line">元素的位置发生改变（增加元素，删除元素，移动）引起回流，让整个页面重新渲染一遍，从而造成的性能的浪费</div><div class="line">重绘：元素的样式发生改变，就会把当前的这个元素重新渲染一遍</div><div class="line">所以在以后项目中，能用重绘代替的就不用回流，能用一次回流就不要使用多次</div><div class="line"></div><div class="line"></div><div class="line">向页面增加元素的方式</div><div class="line">1.动态创建的方式document.createElement，然后一个一个appendChild，会造成多次回流，这样不好，但是他有个好处是不会改变原来的元素（比如不会影响他之前绑定的事件）</div><div class="line">2.通过拼接字符串，最后在一次性通过innerHTML ,这样只会引起一次回流，比较好，但是，他会改变原来的元素（比如会影响他之前绑定的事件）</div><div class="line">3.文档碎片，他就是一个容器专门来盛放DOM元素的</div><div class="line"></div><div class="line">--&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line"></div><div class="line">    var flg=document.createDocumentFragment();</div><div class="line">    for (var i=0;i&lt;jsonData.length;i++)&#123;</div><div class="line">        var oli=document.createElement("li");</div><div class="line">        oli.innerHTML=jsonData[i].content;</div><div class="line">        oli.className=jsonData[i].class;</div><div class="line">        flg.appendChild(oli);</div><div class="line">    &#125;</div><div class="line">    news.appendChild(flg);</div><div class="line">    flg=null;//用完了 没有用了，就清空</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;!--</div><div class="line">步骤：</div><div class="line">1.先创建元素,var oli=document.createElement("li")</div><div class="line">2.按需求给元素增加一些需要的属性</div><div class="line">3.暂时存放在flg(DOM碎片)中,也是flg.appendChild(oli)进去的</div><div class="line">4.循环完之后，把整个flg放到ul中，news.appendChild(flg)</div><div class="line">这样只会引起回流一次</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基于GitHub搭建自己的博客]]></title>
      <url>/2017/04/25/%E5%9F%BA%E4%BA%8EGitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h1 id="基于GitHub搭建自己的博客"><a href="#基于GitHub搭建自己的博客" class="headerlink" title="基于GitHub搭建自己的博客"></a>基于GitHub搭建自己的博客</h1><h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><ul>
<li>Node.js 的安装和准备</li>
<li>Git的安装和准备</li>
<li>gitHub账户的配置</li>
</ul>
<h3 id="Node-js-的安装和准备"><a href="#Node-js-的安装和准备" class="headerlink" title="Node.js 的安装和准备"></a>Node.js 的安装和准备</h3><ul>
<li>1.下载node.js安装文件：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li>2.cmd，打开命令行界面,查看安装版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nede -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
<h3 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h3><ul>
<li>下载Git安装文件：<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a></li>
<li>打开命令行输入,检查安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
<h3 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h3><ul>
<li>Github注册：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
<li>创建代码库：</li>
<li>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意：</div><div class="line">比如我的github名称是mengqian1117 ,</div><div class="line">这里你就填 mengqian1117.github.io</div></pre></td></tr></table></figure>
<ul>
<li>代码库设置:Setting<ul>
<li>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages</li>
<li>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面</li>
</ul>
</li>
</ul>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li>首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E:    进入E盘</div><div class="line">cd Hexo 进入Hexo文件夹</div></pre></td></tr></table></figure>
<ul>
<li>安装HEXO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入</p>
<ul>
<li>保存hexo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
<ul>
<li>检查安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure>
<p>##hexo的相关配置</p>
<p>###初始化Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>###首次体验Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   #生成</div><div class="line">hexo s   #启动服务</div></pre></td></tr></table></figure>
<p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<p>##怎样将Hexo与github page 联系起来<br>大概分为以下几步</p>
<ul>
<li>配置git个人信息</li>
<li>配置Deployment</li>
</ul>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><ul>
<li><p>1.设置Git的user name和email：(如果是第一次的话)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;mengqian1117&quot;</div><div class="line">git config --global user.email &quot;mengqian1117@163.com&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>2.检查是否已经有SSH Key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div><div class="line">ls</div></pre></td></tr></table></figure>
</li>
<li><p>3.生成密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;mengqian1117@163.com&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">连续3个回车。如果不需要密码的话。</div><div class="line">最后得到了两个文件：id_rsa和id_rsa.pub。</div><div class="line">默认的存储路径是：C:\Users\Administrator\.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>4.添加密钥到ssh-agent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval &quot;$(ssh-agent -s)&quot;</div></pre></td></tr></table></figure>
<p>添加生成的 SSH key 到 ssh-agent。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
</li>
<li><p>5.登陆Github, 添加 ssh<br>把id_rsa.pub文件里的内容复制到SSH keys</p>
</li>
<li><p>6.测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>你将会看到：如果看到Hi后面是你的用户名，就说明成功了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果提示Are you sure you want to continue connecting (yes/no)?，输入yes</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><ul>
<li><p>配置_config.yml中有关deploy的部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repository: git@github.com:mengqian1117/mengqian1117.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="写博客、发布文章"><a href="#写博客、发布文章" class="headerlink" title="写博客、发布文章"></a>写博客、发布文章</h2><ul>
<li><p>1.定位到我们的hexo根目录，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &apos;my-first-blog&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>hexo会帮我们在_posts下生成相关md文件,用马克飞象打开写文章就可以</p>
</li>
<li><p>文章编辑好之后，运行生成、部署命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   // 生成</div><div class="line">hexo d   // 部署</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g #在部署前先生成</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="踩坑提醒"><a href="#踩坑提醒" class="headerlink" title="踩坑提醒"></a>踩坑提醒</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deloyer not found:git</div></pre></td></tr></table></figure>
<p> 这样的错误是需要装插件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
